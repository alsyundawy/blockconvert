[package]
name = "blockconvert"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
serde = { version = "1.0", features = ["derive", "rc"] }
url = { version = "2.5.0", features = ["serde"] }
axum = { version = "0.7", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }
leptos = { git = "https://github.com/leptos-rs/leptos", version = "0.6", features = [
    "nightly",
    "experimental-islands",
    "nonce",
] }
leptos_axum = { git = "https://github.com/leptos-rs/leptos", version = "0.6", features = [
    "experimental-islands",
    "nonce",
], optional = true }
leptos_meta = { git = "https://github.com/leptos-rs/leptos", version = "0.6", features = [
    "nightly",
] }
leptos_router = { git = "https://github.com/leptos-rs/leptos", version = "0.6", features = [
    "nightly",
] }
tokio = { version = "1", features = [
    "rt-multi-thread",
    "parking_lot",
    "process"
], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
wasm-bindgen = { version = "=0.2.91", default-features = false, optional = true }
thiserror = "1"
http = "1"
csv = { version = "1.3.0", optional = true }
env_logger = { version = "0.11.3", optional = true }
log = "0.4.21"
console_log = { version = "1.0", features = ["color"], optional = true }
sqlx = { version = "0.7", features = [
    "runtime-tokio",
    "chrono",
    "postgres",
    "ipnetwork",
], optional = true }
reqwest = { version = "0.11.24", features = [
    "rustls-tls",
    "brotli",
], default-features = false, optional = true }
chrono = { version = "0.4", features = ["serde"] }
dotenvy = { version = "0.15.7", optional = true }
mimalloc = { version = "0.1.39", optional = true }
hickory-resolver = { version = "0.24.0", features = [
    "tokio-runtime",
], optional = true }
addr = "0.15.6"
ipnetwork = "0.20.0"
futures = "0.3.30"
sct = { version = "0.7.1", optional = true }
ct-logs = { version = "0.9.0", optional = true }
rand = { version = "0.8.5", optional = true }
hickory-proto = { version = "0.24.0", default-features = false }
humantime = "2.1.0"
notify = { version = "6.1.1", optional = true }
async-channel = {version = "2.2.0", optional = true}


[features]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "dep:console_log",
    "dep:console_error_panic_hook",
    "dep:wasm-bindgen",
]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:csv",
    "dep:env_logger",
    "dep:sqlx",
    "dep:reqwest",
    "dep:dotenvy",
    "dep:mimalloc",
    "dep:hickory-resolver",
    "dep:sct",
    "dep:ct-logs",
    "dep:rand",
    "dep:notify",
    "dep:async-channel",
]
default = ["ssr"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.server-dev]
inherits = "dev"
opt-level = 3

[profile.dev.package."*"]
opt-level = 3

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "blockconvert"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/blockconvert"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false


bin-profile-dev = "server-dev"

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"
# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
tailwind-config-file = "tailwind.config.js"
